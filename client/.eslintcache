[{"/media/anhhao/Data/Agents/20212019 - Anh Hao/20210926 - music-box/client/src/index.js":"1","/media/anhhao/Data/Agents/20212019 - Anh Hao/20210926 - music-box/client/src/reportWebVitals.js":"2","/media/anhhao/Data/Agents/20212019 - Anh Hao/20210926 - music-box/client/src/App.js":"3"},{"size":500,"mtime":1632650914506,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1632650914508,"results":"6","hashOfConfig":"5"},{"size":6564,"mtime":1632655597217,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1dvsqm4",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"10"},"/media/anhhao/Data/Agents/20212019 - Anh Hao/20210926 - music-box/client/src/index.js",[],["17","18"],"/media/anhhao/Data/Agents/20212019 - Anh Hao/20210926 - music-box/client/src/reportWebVitals.js",[],["19","20"],"/media/anhhao/Data/Agents/20212019 - Anh Hao/20210926 - music-box/client/src/App.js",["21"],"import { Component } from 'react';\nimport './App.css';\nimport MusicIcon from './music.svg';\nimport PlayIcon from './play.svg';\nimport PauseIcon from './pause.svg';\nimport SyncIcon  from './sync.svg';\nimport DiskIcon from './disk.jpg';\nimport RabbitLyrics from 'rabbit-lyrics';\nimport Parse from 'parse';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      id: null,\n      songs: [],\n      source: null,\n      isPlaying: false,\n      canPlay: false,\n      subtitle: '',\n      // timeline\n      duration: 0,\n      current: 0,\n      position: -1,\n      positionLabel: ''\n    };\n\n    this.togglePlay = this.togglePlay.bind(this);\n    this.play = this.play.bind(this);\n\n    // audio ref tag\n    this.audio = null;\n    this.subtitle = null;\n    this.timeline = null;\n\n    this.setAudio = node => {\n      this.audio = node;\n    };\n\n    this.setSubtitle = node => {\n      this.subtitle = node;\n    };\n\n    this.setTimeline = node => {\n      this.timeline = node;\n    }\n\n    // ref event\n    this.updateAudioEvent = () => {\n      this.audio.addEventListener('canplaythrough', () => {\n        this.setState({\n          canPlay: true,\n          duration: this.audio.duration\n        });\n        \n        if (this.state.isPlaying)\n          this.audio.play();\n\n      }, false);\n\n      this.audio.addEventListener('ended', () => {\n        console.log('Song ended');\n        this.play((this.state.id + 1) % this.state.songs.length);\n      });\n\n      this.audio.addEventListener('timeupdate', () => {\n        if (this.audio)\n          this.setState({\n            current: this.audio.currentTime\n          });\n      });\n\n      this.timeline.addEventListener('mousemove', e => {\n        const percent = e.layerX/this.timeline.offsetWidth;\n        let positionLabel = '';\n\n        if (!this.audio || !this.state.duration){\n          return;\n        }\n\n        positionLabel = percent * this.state.duration;\n\n        this.setState({ position: e.layerX, positionLabel });\n      });\n\n      this.timeline.addEventListener('mouseout', e => {\n        this.setState({ position: -1 });\n      });\n\n      this.timeline.addEventListener('click', e => {\n        const percent = e.layerX/this.timeline.offsetWidth;\n\n        if (this.audio && this.state.duration){\n          this.audio.currentTime = percent * this.state.duration;\n        }\n      });\n    };\n\n    // init parse\n    // Parse.initialize('myappID', 'mymasterKey')\n    // Parse.serverURL = \"http://localhost:1337/parse/\";\n  }\n\n  async componentDidMount(){\n    // fetch song list\n    // const songs = await Parse.Cloud.run(\"songs\");\n    const { data: songs } = await axios.get('http://localhost:3000/songs')\n\n    this.setState({ songs });\n\n    // play song \n    this.updateAudioEvent();\n    this.play(Math.floor(Math.random() * songs.length));\n  }\n\n  componentWillUnmount(){\n\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (prevState.subtitle !== this.state.subtitle && this.subtitle && this.audio){\n      const newelm = document.createElement('div');\n      this.subtitle.innerHTML = '';\n      this.subtitle.appendChild(newelm);\n\n      newelm.innerHTML = this.state.subtitle;\n\n      new RabbitLyrics({\n        element: newelm,\n        mediaElement: this.audio\n      });\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"player\">\n          <audio \n            id=\"audio\" \n            src={ this.state.source } \n            controls \n            ref={ this.setAudio }/>\n\n          <div className=\"subtitle-wrapper\">\n            <div className=\"subtitle\" ref={ this.setSubtitle }></div>\n            { this.state.subtitle.trim() === '' ? (\n              <div className=\"disk\" isplaying={ this.state.isPlaying ? 'true' : 'false' }>\n                <img src={ DiskIcon } alt=\"disk\"/>\n              </div>\n              ) : ''\n            }\n            \n          </div>\n          <div className=\"timeline-wrapper\">\n            <div className=\"timeline\" ref={ this.setTimeline }>\n              <div className=\"current\" style={{ width: this.state.current/this.state.duration*100 + '%'}}></div>\n              { this.state.position !== -1 ? (\n                <div className=\"tooltip\" style={{ left: this.state.position }}>{ this.formatTime(this.state.positionLabel) }</div>\n              ) : ''}\n            </div>\n          </div>\n          <div className=\"info\">\n            <div className=\"song\">{ this.state.canPlay ? (this.state.songs.filter(s => s.id === this.state.id)[0] || {}).name : 'Loading...' }</div>\n            <div className=\"singer\">{ this.state.canPlay ? (this.state.songs.filter(s => s.id === this.state.id)[0] || {}).singer : '' }</div>\n          </div>\n          <div className=\"control\">\n            <button className=\"play\" onClick={() => this.togglePlay()} disabled={ !this.state.canPlay }>\n              <img src={this.state.canPlay ? (this.state.isPlaying ? PauseIcon : PlayIcon) : SyncIcon } alt=\"play icon\"/>\n            </button>\n          </div>\n        </div>\n        <div className=\"playlist\">\n          { this.state.songs.map(song => \n            <button className=\"song\" key={song.id} iscurrent={ song.id === this.state.id ? 'true' : 'false' } onClick={ () => this.play(song.id) }>\n              <div className=\"name\">\n                { song.name }\n              </div>\n              <div className=\"icon\">\n                <img src={MusicIcon} alt=\"music play\"/>\n              </div>\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  async play(songid){\n    console.log(`Play song ${songid}`);\n    // find song\n    const song = this.state.songs.filter(s => s.id === songid)[0];\n\n    if (!song)\n      return;\n\n    // fetch song\n    // const data = await Parse.Cloud.run(\"getsong\", {\n    //   url: song.url\n    // });\n\n    const { data } = await axios.get(`http://localhost:3000/getsong/${encodeURIComponent(song.url)}`);\n\n    this.setState(Object.assign({ \n      id: songid,\n      canPlay: false,\n      duration: 0,\n      current: 0,\n      source: '',\n      subtitle: ''\n    }, data));\n  }\n\n  togglePlay(){\n    this.setState((state) => {\n      const isPlaying = !state.isPlaying;\n\n      if (this.audio && isPlaying){\n        this.audio.play();\n      }\n      \n      if (this.audio && !isPlaying){\n        this.audio.pause();\n      }\n\n      return {\n        isPlaying: !state.isPlaying\n      }\n    });\n  }\n\n  formatTime(seconds){\n    const min = Math.floor(seconds/60);\n    seconds = Math.floor(seconds % 60);\n    return `${min}:${seconds}`\n  }\n}\n\nexport default App;\n",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"22","replacedBy":"26"},{"ruleId":"24","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":9,"column":8,"nodeType":"30","messageId":"31","endLine":9,"endColumn":13},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],["32"],["33"],"no-unused-vars","'Parse' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]